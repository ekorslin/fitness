{"ast":null,"code":"// Importing the axios dependency\nimport axios from 'axios'; // Creating an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\n\nvar instance = axios.create(); //Intercepting requests or responses\n\ninstance.interceptors.request.use(function (request) {\n  // Creating an authToken variable that stores the JSON token in session storage. It will be removed when the session is ended.\n  var authToken = sessionStorage.jwt; // If there is an authToken, send the access token in the Authorization request header field (which is defined by HTTP/1.1). The client uses the Bearer authentication scheme to transmit the access token.\n\n  if (authToken) {\n    if (request.headers && !request.headers.Authorization) {\n      request.headers['Authorization'] = \"Bearer \".concat(authToken);\n    }\n  } // request.headers.post['Content-Type'] = 'application/json'\n\n\n  return request;\n}); // Exporting our instance as the default.\n\nexport default instance;","map":{"version":3,"sources":["/Users/ekorslin/Desktop/fitness/client/src/api/axios.js"],"names":["axios","instance","create","interceptors","request","use","authToken","sessionStorage","jwt","headers","Authorization"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,IAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,EAAjB,C,CAEA;;AACAD,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUD,OAAV,EAAmB;AACnD;AACA,MAAIE,SAAS,GAAGC,cAAc,CAACC,GAA/B,CAFmD,CAGnD;;AACA,MAAIF,SAAJ,EAAe;AACb,QAAIF,OAAO,CAACK,OAAR,IAAmB,CAACL,OAAO,CAACK,OAAR,CAAgBC,aAAxC,EAAuD;AACrDN,MAAAA,OAAO,CAACK,OAAR,CAAgB,eAAhB,qBAA6CH,SAA7C;AACD;AACF,GARkD,CASnD;;;AACA,SAAOF,OAAP;AACD,CAXD,E,CAaA;;AACA,eAAeH,QAAf","sourcesContent":["// Importing the axios dependency\nimport axios from 'axios';\n// Creating an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n//Intercepting requests or responses\ninstance.interceptors.request.use(function (request) {\n  // Creating an authToken variable that stores the JSON token in session storage. It will be removed when the session is ended.\n  var authToken = sessionStorage.jwt\n  // If there is an authToken, send the access token in the Authorization request header field (which is defined by HTTP/1.1). The client uses the Bearer authentication scheme to transmit the access token.\n  if (authToken) {\n    if (request.headers && !request.headers.Authorization) {\n      request.headers['Authorization'] = `Bearer ${authToken}`\n    }\n  }\n  // request.headers.post['Content-Type'] = 'application/json'\n  return request\n})\n\n// Exporting our instance as the default.\nexport default instance\n"]},"metadata":{},"sourceType":"module"}